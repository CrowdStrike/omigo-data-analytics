#####################################################################################################
# DOCKER TUROIAL SUMMARY WITH SAMPLE COMMANDS
#####################################################################################################

# Start the tutorial
docker run -d -p 8888:80 docker/getting-started

# Tutorial 
http://localhost:8888

# Docker Dashboard

# Terms
Container, Container Image, Host Port, Volume, Network
 - Container is a running image. 
 - Exposing port. 
 - Mounting volume. 
 - Connected to other containers through ports. 
 - Multiple containers composed through docker-compose

Docker Dashboard shows a list of running containers.


# Sample Build Command:
docker build -t getting-started .

# Sample Run Command:
docker run -dp 3000:3000 getting-started

$ docker ps
$ docker stop <container-id>
$ docker rm <container-id>


# Sharing App
# need docker account first, and login
$ docker push <USERNAME>/getting-started
$ docker tag getting-started <USERNAME>/getting-started

# Sharing Data
$ docker run -d ubuntu bash -c "shuf -i 1-10000 -n 1 -o /data.txt && tail -f /dev/null"
$ docker ps

$ docker exec <container-id> cat /data.txt

# Run docker container interactively, stops on exit
$ docker run -it ls /

# Create volume and mount in a container
$ docker volume create todo-db
$ docker run -dp 3000:3000 -v todo-db:/etc/todos getting-started

# Inspect a Volume
$ docker volume inspect todo-db

# The mount point is an actual location, but might be inside another small VM.
# Check Logs
$ docker logs -f <container-id>

# Multi Container Apps
 - Running each app in a separate container is advisable.
 - Keep things separate and clean
 - Out of the box docker images. Can evolve independently.

# Network
$ docker network create todo-app

# Start MySQL in Container using standard image
$ docker run -d --network todo-app --network-alias mysql -v todo-mysql-data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=secret -e MYSQL_DATABASE=todos mysql:5.7

# How to find which container is running mysql
$ docker run -it --network todo-app <test>/<test>
$ dig mysql

# Sample command to run
$  docker run -dp 3000:3000 -w /app -v ${PWD}:/app --network todo-app -e MYSQL_HOST=mysql -e MYSQL_USER=<setme> -e MYSQL_PASSWORD=<setme> -e MYSQL_DB=todos \
  node:12-alpine sh -c "yarn install && yarn run dev"

# Docker Compose
# Create a docker compose file that contains specification of different apps, volumes, network and environment variables.

version: "3.7"

services:
  app:
    image: node:12-alpine
    command: sh -c "yarn install && yarn run dev"
    ports:
      - 3000:3000
    working_dir: /app
    volumes:
      - ./:/app
    environment:
      MYSQL_HOST: mysql
      MYSQL_USER: root
      MYSQL_PASSWORD: secret
      MYSQL_DB: todos

  mysql:
    image: mysql:5.7
    volumes:
      - todo-mysql-data:/var/lib/mysql
    environment: 
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: todos

volumes:
  todo-mysql-data:


$ docker-compose up -d

# Tearing it down
$ docker-compose down

# Building Dockerfile
https://docs.docker.com/engine/reference/builder/

# Docker Repos
https://docs.docker.com/docker-hub/repos/


